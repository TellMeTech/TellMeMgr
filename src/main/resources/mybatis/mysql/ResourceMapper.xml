<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hotel.dao.ResourceMapper" >
  <resultMap id="BaseResultMap" type="com.hotel.model.Resource" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="resource_type" property="resourceType" jdbcType="INTEGER" />
    <result column="node_type" property="nodeType" jdbcType="TINYINT" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="level" property="level" jdbcType="TINYINT" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="leaf" property="leaf" jdbcType="BIT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="css" property="css" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="sort" property="sort" jdbcType="TINYINT" />
    <result column="flag" property="flag" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, resource_type, node_type, parent_id, level, path, leaf, name, url, css, description, 
    sort, flag
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_resource
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_resource
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hotel.model.Resource" >
    insert into t_resource (id, resource_type, node_type, 
      parent_id, level, path, 
      leaf, name, url, css, 
      description, sort, flag
      )
    values (#{id,jdbcType=INTEGER}, #{resourceType,jdbcType=INTEGER}, #{nodeType,jdbcType=TINYINT}, 
      #{parentId,jdbcType=INTEGER}, #{level,jdbcType=TINYINT}, #{path,jdbcType=VARCHAR}, 
      #{leaf,jdbcType=BIT}, #{name,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, #{css,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{sort,jdbcType=TINYINT}, #{flag,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hotel.model.Resource" >
    insert into t_resource
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="resourceType != null" >
        resource_type,
      </if>
      <if test="nodeType != null" >
        node_type,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="path != null" >
        path,
      </if>
      <if test="leaf != null" >
        leaf,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="url != null" >
        url,
      </if>
      <if test="css != null" >
        css,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="sort != null" >
        sort,
      </if>
      <if test="flag != null" >
        flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="resourceType != null" >
        #{resourceType,jdbcType=INTEGER},
      </if>
      <if test="nodeType != null" >
        #{nodeType,jdbcType=TINYINT},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        #{level,jdbcType=TINYINT},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="leaf != null" >
        #{leaf,jdbcType=BIT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="url != null" >
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="css != null" >
        #{css,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=TINYINT},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hotel.model.Resource" >
    update t_resource
    <set >
      <if test="resourceType != null" >
        resource_type = #{resourceType,jdbcType=INTEGER},
      </if>
      <if test="nodeType != null" >
        node_type = #{nodeType,jdbcType=TINYINT},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=TINYINT},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="leaf != null" >
        leaf = #{leaf,jdbcType=BIT},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="css != null" >
        css = #{css,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=TINYINT},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hotel.model.Resource" >
    update t_resource
    set resource_type = #{resourceType,jdbcType=INTEGER},
      node_type = #{nodeType,jdbcType=TINYINT},
      parent_id = #{parentId,jdbcType=INTEGER},
      level = #{level,jdbcType=TINYINT},
      path = #{path,jdbcType=VARCHAR},
      leaf = #{leaf,jdbcType=BIT},
      name = #{name,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      css = #{css,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=TINYINT},
      flag = #{flag,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectByParentId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_resource
    where node_type = 1 and parent_id = #{parentId,jdbcType=INTEGER} 
    order by sort
  </select>
  
  <select id="selectByRoleId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    b.id, b.resource_type, b.node_type, b.parent_id, b.level, b.path, b.leaf, b.name, b.url, b.css, b.description, 
    b.sort, b.flag 
    from t_role_resource as a left join t_resource as b on a.resource_id = b.id where a.role_id = #{roleId,jdbcType=INTEGER} and b.node_type = 1 and b.parent_id = 0
    order by sort
  </select>
</mapper>