<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hotel.dao.LogMapper" >
  <resultMap id="BaseResultMap" type="com.hotel.model.Log" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="log_time" property="logTime" jdbcType="TIMESTAMP" />
    <result column="log_type" property="logType" jdbcType="TINYINT" />
    <result column="actor_type" property="actorType" jdbcType="TINYINT" />
    <result column="actor_id" property="actorId" jdbcType="INTEGER" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="message" property="message" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    l.id, l.log_time, l.log_type, l.actor_type, l.actor_id, l.ip, l.message
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_log l
    where l.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hotel.model.Log" >
    insert into t_log (id, log_time, log_type, 
      actor_type, actor_id, ip, 
      message)
    values (#{id,jdbcType=INTEGER}, #{logTime,jdbcType=TIMESTAMP}, #{logType,jdbcType=TINYINT}, 
      #{actorType,jdbcType=TINYINT}, #{actorId,jdbcType=INTEGER}, #{ip,jdbcType=VARCHAR}, 
      #{message,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hotel.model.Log" >
    insert into t_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="logTime != null" >
        log_time,
      </if>
      <if test="logType != null" >
        log_type,
      </if>
      <if test="actorType != null" >
        actor_type,
      </if>
      <if test="actorId != null" >
        actor_id,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="message != null" >
        message,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="logTime != null" >
        #{logTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logType != null" >
        #{logType,jdbcType=TINYINT},
      </if>
      <if test="actorType != null" >
        #{actorType,jdbcType=TINYINT},
      </if>
      <if test="actorId != null" >
        #{actorId,jdbcType=INTEGER},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        #{message,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hotel.model.Log" >
    update t_log
    <set >
      <if test="logTime != null" >
        log_time = #{logTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logType != null" >
        log_type = #{logType,jdbcType=TINYINT},
      </if>
      <if test="actorType != null" >
        actor_type = #{actorType,jdbcType=TINYINT},
      </if>
      <if test="actorId != null" >
        actor_id = #{actorId,jdbcType=INTEGER},
      </if>
      <if test="ip != null" >
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        message = #{message,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hotel.model.Log" >
    update t_log
    set log_time = #{logTime,jdbcType=TIMESTAMP},
      log_type = #{logType,jdbcType=TINYINT},
      actor_type = #{actorType,jdbcType=TINYINT},
      actor_id = #{actorId,jdbcType=INTEGER},
      ip = #{ip,jdbcType=VARCHAR},
      message = #{message,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getLogList" resultMap="BaseResultMap" parameterType="com.hotel.model.Log">
    select 
    <include refid="Base_Column_List" />,l.log_time as cTime, u.name as actorName
    from t_log l
    left join t_user u on u.id = l.actor_id
    where 1=1
    <if test="searchName != null">
       and (u.name like CONCAT("%",#{searchName,jdbcType=VARCHAR},"%") OR l.ip like CONCAT("%",#{searchName,jdbcType=VARCHAR},"%"))
    </if>
    order by l.log_time DESC
    <if test="pageStart != null and pageSize != null and pageStart>-1 and pageSize>-1">
      limit #{pageStart}, #{pageSize}
    </if>
  </select>
  <select id="getLogListCount" resultType="java.lang.Integer" parameterType="com.hotel.model.Log" >
    select 
    count(l.id)
    from t_log l
    left join t_user u on u.id = l.actor_id
    where 1=1
    <if test="searchName != null">
       and (u.name like CONCAT("%",#{searchName,jdbcType=VARCHAR},"%") OR l.ip like CONCAT("%",#{searchName,jdbcType=VARCHAR},"%"))
    </if>
  </select>
</mapper>